# https://www.json2yaml.com/convert-yaml-to-json
# https://www.json2yaml.com/
---
name: krc_es6js_snipetts
enabled: true
icon: mdi-language-javascript palette-Amber-A200 text
rules:
   - title: jses6 snippets
     type: 'object'
     expander: js
     params:
        changePath:
           path: JSES6snip

   - title: null function
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let nullfunc = () => {}

   - title: arrow function
     path: JSES6snip
     expander: =>
     params:
        codeclass: 'javascript'
        snippet: |-
           () => {}

   - title: array.filter
     path: JSES6snip
     expander: .filter
     params:
        codeclass: 'javascript'
        snippet: |-
           .filter(obj => obj.id === id)

   - title: array.map
     path: JSES6snip
     expander: .map
     params:
        codeclass: 'javascript'
        snippet: |-
           .map(obj => obj.length)

   - title: array.find
     path: JSES6snip
     expander: .find
     params:
        codeclass: 'javascript'
        snippet: |-
           .find(obj => obj.id === id)

   - title: array merge
     path: JSES6snip
     expander: concat
     params:
        codeclass: 'javascript'
        snippet: |-
           [...arr1, ...arr2]

   - title: exports
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           export default {} //browser
           module.exports {} //node

   - title: export
     path: JSES6snip
     expander: export
     params:
        codeclass: 'javascript'
        snippet: |-
           module.exports {}

   - title: array.from (repeater)
     path: JSES6snip
     expander: .from
     params:
        codeclass: 'javascript'
        snippet: |-
           .from({ length: 10 }, (v, i) => {
               return { id: i }
           })

   - title: require
     path: JSES6snip
     expander: [req, jsreq]
     params:
        codeclass: 'javascript'
        snippet: |-
           const some = require('some')

   - title: import
     path: JSES6snip
     expander: [imp, import]
     params:
        codeclass: 'javascript'
        snippet: |-
           import some from 'some'

   - title: typeof
     path: JSES6snip
     expander: [type, typeof]
     params:
        codeclass: 'javascript'
        snippet: |-
           typeof obj

   - title: settimeout
     path: JSES6snip
     expander: [time, sto]
     params:
        codeclass: 'javascript'
        snippet: |-
           setTimeout(() => {}, 0);

   - title: set timeout for await
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           const $timeout = ms => new Promise(res => setTimeout(res, ms))

   - title: setinterval
     path: JSES6snip
     expander: [inter, interval]
     params:
        codeclass: 'javascript'
        snippet: |-
           setInterval(() => {}, 0);

   - title: try catch
     path: JSES6snip
     expander: try
     params:
        codeclass: 'javascript'
        snippet: |-
           try {

           } catch (e) {
           }

   - title: json.parse
     path: JSES6snip
     expander: parse
     params:
        codeclass: 'javascript'
        snippet: |-
           JSON.parse(str)

   - title: date
     path: JSES6snip
     expander: date
     params:
        codeclass: 'javascript'
        snippet: |-
           new Date()

   - title: date full
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           new Date("Mar 30, 2017 00:00:00")

   - title: promise
     path: JSES6snip
     expander: promise
     params:
        codeclass: 'javascript'
        snippet: |-
           return new Promise((resolve, reject) => {
             resolve(arr)
           })

   - title: promise all
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Promise.all([p1, p2, p3]).then(values => {
             console.log(values)
           })

   - title: touppercase
     path: JSES6snip
     expander: [.up, .upp]
     params:
        codeclass: 'javascript'
        snippet: |-
           .toUpperCase()

   - title: tolowercase
     path: JSES6snip
     expander: [.lo, .low]
     params:
        codeclass: 'javascript'
        snippet: |-
           .toLowerCase()

   - title: JSON.stringify
     path: JSES6snip
     expander: [.str, stringify, stringi]
     params:
        codeclass: 'javascript'
        snippet: |-
           JSON.stringify(temp1,​ ​null,​ ​2)

   - title: length
     path: JSES6snip
     expander: [.len, .leng, leng]
     params:
        codeclass: 'javascript'
        snippet: |-
           .length

   - title: console.log
     path: JSES6snip
     expander: [cl, .log, kl, log]
     params:
        codeclass: 'javascript'
        snippet: |-
           console.log('')

   - title: all utf8 characters
     path: JSES6snip
     params:
        snippet: |-
           abcdefghijklmnopqrstuvwxyz @©®§?£$&_+-'"(),./\:;?!<>«»àáâçèêéûÈÉÊ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*ÁáÉéÍíÓóÚúñÑüÜ¿?¡!àâçèêëïî—»«ÿûùœôäößÄÖ„“”°€£ ’.:"()/|I[]l‘òËÏãõÃÕÁáÉéÍíÓóÚúñÑüÜ¿?¡! ÁáÉéÍíÓóÚúñÑüÜ¿?¡!àâçèêëïî—»«ÿûùœôäößÄÖ„“”°€£ ’.:"()/|I[]l‘òËÏãõÃÕ%•º

   - title: function
     path: JSES6snip
     expander: [fun, func]
     params:
        codeclass: 'javascript'
        snippet: |-
           function fun() {}

   - title: for
     path: JSES6snip
     expander: for
     params:
        codeclass: 'javascript'
        snippet: |-
           for (let i = 0; i < arr.length; i++) {
             let obj = arr[i]
           }

   - title: window.copy stringify
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           window.copy(JSON.stringify(temp1, null, 2))

   - title: replace all spaces (regex)
     path: JSES6snip
     expander: replacespace
     params:
        codeclass: 'javascript'
        snippet: |-
           .replace(/\s/g, '')

   - title: replace all string (regex)
     path: JSES6snip
     expander: [.replace, replaceall]
     params:
        codeclass: 'javascript'
        snippet: |-
           .replace(/abc/g, '')

   - title: remove obj in array (splice)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           .splice(arr.findIndex((i) => i.x === c.x ), 1)

   - title: findIndex
     path: JSES6snip
     expander: .findindex
     params:
        codeclass: 'javascript'
        snippet: |-
           let index = costos.findIndex(costo => {
               return String(costo.proveedor.id) === String(proveedor.id)
           })
           return index !== -1

   - title: array.splice
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           .splice(start, deleteCount)

   - title: delete obj prop
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           delete obj.prop

   - title: encodeuricomponent string
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           encodeURIComponent(str)

   - title: keys length
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Object.keys(myArray).length

   - title: object assign (extend)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Object.assign({}, obj1, obj2)

   - title: full url location
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           window.location.href

   - title: history pushstate
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           window.history.pushState('page2', 'Title', '/page2.php')

   - title: encodeuri string
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           encodeURI(str)

   - title: array.sort
     path: JSES6snip
     expander: .sort
     params:
        codeclass: 'javascript'
        snippet: |-
           .sort((a, b) => {
             return b.length - a.length;
           });

   - title: array.sort complex
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           arr.sort(function(a, b) {
               var nameA = a.name.toUpperCase()
               //ignore upper and lowercase

               var nameB = b.name.toUpperCase()
               //ignore upper and lowercase

               if (nameA < nameB) {
                   return -1
               }

               if (nameA > nameB) {
                   return 1
               }

               //names must be equal
               return 0
           })

   - title: array.foreach
     path: JSES6snip
     expander: [.each, .foreach, foreach]
     params:
        codeclass: 'javascript'
        snippet: |-
           .forEach(obj => {
               console.log(obj)
           })

   - title: parsefloat
     path: JSES6snip
     expander: [parsefloat, parsef]
     params:
        codeclass: 'javascript'
        snippet: |-
           parseFloat(num)

   - title: tofixed (cant decimals)
     path: JSES6snip
     expander: .fix
     params:
        codeclass: 'javascript'
        snippet: |-
           .toFixed(4)

   - title: switch case
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function getCategory(age) {
               var category = ''
               switch (true) {
                   case isNaN(age):
                       category = 'not an age'
                       break
                   case age >= 50:
                       category = 'Old'
                       break
                   case age <= 20:
                       category = 'Baby'
                       break
                   default:
                       category = 'Young'
                       break
               }
               return category
           }
           getCategory(5) //will return "Baby"

   - title: array chain
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           arr
               .map(el => {
                   el.age++
                   return el
               })
               .filter(el => {
                   return el.age < 12
               })
               .map(el => {
                   console.log(el.name)
               })

   - title: parseint
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           parseInt(num, 10)

   - title: short conditional if (ternary)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           (true) ? 1 : 2

   - title: short conditional value if (ternary)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           console.log(true ? 1 : 2)

   - title: short conditional function if (ternary)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           true ? console.log('1') : console.log('2')

   - title: regex test
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           (/world/i).test('Hello World')

   - title: random()
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Math.random()

   - title: random integer
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Math.floor(Math.random() * 2)

   - title: html onclick tag
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           onclick="history.back()return false;"

   - title: getelementbyid (get element)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementById('')

   - title: getelementsbytagname (get element)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementsByTagName('')

   - title: queryselector (get element)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.querySelector('')

   - title: queryselectorall (get element)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.querySelectorAll('')

   - title: getelementsbyclassname (get element)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementsByClassName('')

   - title: use strict
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           'use strict'

   - title: stop propagation
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           ev.preventDefault()
           ev.stopPropagation()
           return false

   - title: window location
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           window.location = 'test.html'

   - title: history back
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           history.back()

   - title: string indexof
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           if (.indexOf('jsx') !== -1) {}

   - title: add space sep
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           + ' ' +

   - title: break string sep
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           ' + mivar + '

   - title: break string sep double
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           + " " +

   - title: arr some
     path: JSES6snip
     expander: .some
     params:
        codeclass: 'javascript'
        snippet: |-
           .some(arr => {
               if (name.indexOf(arr) !== -1 && arr.length) {
                   return true
               }
           })

   - title: detect mobile
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           if (
               navigator.userAgent.match(/Android/i) ||
               navigator.userAgent.match(/webOS/i) ||
               navigator.userAgent.match(/iPhone/i) ||
               navigator.userAgent.match(/iPad/i) ||
               navigator.userAgent.match(/iPod/i) ||
               navigator.userAgent.match(/BlackBerry/i) ||
               navigator.userAgent.match(/Windows Phone/i)
           ) {
               return true
           } else {
               return false
           }

   - title: array.concat
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           var arr3 = arr1.concat(arr2)

   - title: string includes substring
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           .includes(substring)

   - title: getAttribute
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getAttribute('')

   - title: setAttribute
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.setAttribute('','')

   - title: classList.add
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementById("myDIV").classList.add("mystyle")

   - title: classList.remove
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementById("myDIV").classList.remove("mystyle")

   - title: classList.toggle
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementById("myDIV").classList.toggle("mystyle")

   - title: addEventListener
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           document.getElementById("miId").addEventListener("click", function, false)

   - title: is Object
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           content !== null && typeof content === 'object'

   - title: is String
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           typeof content === 'string'

   - title: is Array
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Array.isArray(obj)

   - title: template literals
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           const name = 'Tiger'
           const age = 13
           console.log(`My cat is named ${name} and is ${age} years old.`)

   - title: Destructuring Arrays
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let [a, b, c, d] = [1, 2, 3, 4]

           console.log(a) // 1
           console.log(b) // 2

   - title: module.exports
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           module.exports = 1
           module.exports = { foo: 'bar' }
           module.exports = ['foo', 'bar']
           module.exports = function bar () {}

   - title: module.import
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           import 'underscore'

           import { sumTwo, sumThree } from 'math/addition'

           import {
               sumTwo as addTwoNumbers,
               sumThree as sumThreeNumbers
           } from 'math/addition'

           import * as util from 'math/addition'

           import * as additionUtil from 'math/addition'
           const { sumTwo, sumThree } = additionUtil

   - title: obj as
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           { key as newKey }

   - title: default parameters
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function addTwoNumbers(x=0, y=0) {
               return x + y
           }

   - title: ...args
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function logArguments(...args) {
               for (let arg of args) {
                   console.log(arg)
               }
           }

   - title: _currency (function snippet)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function _currency(N){N=parseFloat(N)if(!isNaN(N))N=N.toFixed(2)else N='0.00';return N;}

   - title: _shuffle (function snippet)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function _shuffle(o) {for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) return o; }

   - title: is function (function snippet)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function _isFunction(functionToCheck) {
             return (
               functionToCheck && {}.toString.call(functionToCheck) === "[object Function]"
             )
           }

   - title: Cheatsheet (web)
     path: JSES6snip
     type: 'object'
     params:
        codeclass: 'javascript'
        openUrl: https://github.com/mbeaudru/modern-js-cheatsheet

   - title: 30secondsofcode CheatSheet (web)
     path: JSES6snip
     type: 'object'
     params:
        codeclass: 'javascript'
        openUrl: https://30secondsofcode.org/

   - title: full api (web)
     path: JSES6snip
     type: 'object'
     params:
        codeclass: 'javascript'
        openUrl: http://overapi.com/javascript

   - title: Array All (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const all = (arr, fn = Boolean) => arr.every(fn)
           //```

           //Examples
           all([4, 2, 3], x => x > 1) // true
           all([1, 2, 3]) // true

   - title: Array Any (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const any = (arr, fn = Boolean) => arr.some(fn)
           //```

           //Examples
           any([0, 1, 2, 0], x => x >= 2) // true
           any([0, 0, 1, 0]) // true

   - title: Array Flatten (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const flatten = (arr, depth = 1) =>
             arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v), [])
           //```

           //Examples
           flatten([1, [2], 3, 4]) // [1, 2, 3, 4]
           flatten([1, [2, [3, [4, 5], 6], 7], 8], 2) // [1, 2, 3, [4, 5], 6, 7, 8]

   - title: Array Intersection (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const intersection = (a, b) => {
             const s = new Set(b)
             return a.filter(x => s.has(x))
           }
           //```

           //Examples
           intersection([1, 2, 3], [4, 3, 2]) // [2, 3]

   - title: Array Remove (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const remove = (arr, func) =>
             Array.isArray(arr)
               ? arr.filter(func).reduce((acc, val) => {
                 arr.splice(arr.indexOf(val), 1)
                 return acc.concat(val)
               }, [])
               : [];
           //```

           //Examples
           remove([1, 2, 3, 4], n => n % 2 === 0) // [2, 4]

   - title: Array Shuffle (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const shuffle = ([...arr]) => {
             let m = arr.length;
             while (m) {
               const i = Math.floor(Math.random() * m--)
               [arr[m], arr[i]] = [arr[i], arr[m]];
             }
             return arr;
           }
           //```

           //Examples
           const foo = [1, 2, 3];
           shuffle(foo) // [2, 3, 1], foo = [1, 2, 3]

   - title: Array Union (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const union = (a, b) => Array.from(new Set([...a, ...b]))
           //```

           //Examples
           union([1, 2, 3], [4, 3, 2]) // [1,2,3,4]

   - title: Array uniqueElements (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const uniqueElements = arr => [...new Set(arr)];
           //```

           //Examples
           uniqueElements([1, 2, 2, 3, 4, 4, 5]) // [1, 2, 3, 4, 5]

   - title: Array uniqueElementsBy (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const uniqueElementsBy = (arr, fn) =>
             arr.reduce((acc, v) => {
               if (!acc.some(x => fn(v, x))) acc.push(v)
               return acc;
             }, [])
           //```

           //Examples
           uniqueElementsBy(
             [
               { id: 0, value: 'a' },
               { id: 1, value: 'b' },
               { id: 2, value: 'c' },
               { id: 1, value: 'd' },
               { id: 0, value: 'e' }
             ],
             (a, b) => a.id == b.id
           ) // [ { id: 0, value: 'a' }, { id: 1, value: 'b' }, { id: 2, value: 'c' } ]

   - title: Array uniqueSymmetricDifference (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const uniqueSymmetricDifference = (a, b) => [
             ...new Set([...a.filter(v => !b.includes(v)), ...b.filter(v => !a.includes(v))])
           ];
           //```

           //Examples
           uniqueSymmetricDifference([1, 2, 3], [1, 2, 4]) // [3, 4]
           uniqueSymmetricDifference([1, 2, 2], [1, 3, 1]) // [2, 3]

   - title: Array difference (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           const difference = (a, b) => {
             const s = new Set(b)
             return a.filter(x => !s.has(x))
           }

           //Examples
           difference([1, 2, 3], [1, 2, 4]) // [3]

   - title: URL currentURL (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const currentURL = () => window.location.href;
           //```

           //Examples
           currentURL() // 'https://google.com'

   - title: detectDeviceType (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const detectDeviceType = () =>
             /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
               ? 'Mobile'
               : 'Desktop';
           //```

           //Examples
           detectDeviceType() // "Mobile" or "Desktop"

   - title: elementIsVisibleInViewport (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const elementIsVisibleInViewport = (el, partiallyVisible = false) => {
             const { top, left, bottom, right } = el.getBoundingClientRect()
             const { innerHeight, innerWidth } = window;
             return partiallyVisible
               ? ((top > 0 && top < innerHeight) || (bottom > 0 && bottom < innerHeight)) &&
                   ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))
               : top >= 0 && left >= 0 && bottom <= innerHeight && right <= innerWidth;
           }
           //```

           //Examples
           // e.g. 100x100 viewport and a 10x10px element at position {top: -1, left: 0, bottom: 9, right: 10}
           elementIsVisibleInViewport(el) // false - (not fully visible)
           elementIsVisibleInViewport(el, true) // true - (partially visible)

   - title: getScrollPosition (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const getScrollPosition = (el = window) => ({
             x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,
             y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop
           })
           //```

           //Examples
           getScrollPosition() // {x: 0, y: 200}

   - title: redirect (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const redirect = (url, asLink = true) =>
             asLink ? (window.location.href = url) : window.location.replace(url)
           //```

           //Examples
           redirect('https://google.com')

   - title: scrollToTop (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const scrollToTop = () => {
             const c = document.documentElement.scrollTop || document.body.scrollTop;
             if (c > 0) {
               window.requestAnimationFrame(scrollToTop)
               window.scrollTo(0, c - c / 8)
             }
           }
           //```

           //Examples
           scrollToTop()

   - title: smoothScroll (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const smoothScroll = element =>
             document.querySelector(element).scrollIntoView({
               behavior: 'smooth'
             })
           //```

           //Examples
           smoothScroll('#fooBar') // scrolls smoothly to the element with the id fooBar
           smoothScroll('.fooBar') // scrolls smoothly to the first element with a class of fooBar

   - title: DATE isAfterDate (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isAfterDate = (dateA, dateB) => dateA > dateB;
           //```

           //Examples
           isAfterDate(new Date(2010, 10, 21), new Date(2010, 10, 20)) // true

   - title: DATE isBeforeDate (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isBeforeDate = (dateA, dateB) => dateA < dateB;
           //```

           //Examples
           isBeforeDate(new Date(2010, 10, 20), new Date(2010, 10, 21)) // true

   - title: debounce (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const debounce = (fn, ms = 0) => {
             let timeoutId;
             return function(...args) {
               clearTimeout(timeoutId)
               timeoutId = setTimeout(() => fn.apply(this, args), ms)
             }
           }
           //```

           //Examples
           window.addEventListener(
             'resize',
             debounce(() => {
               console.log(window.innerWidth)
               console.log(window.innerHeight)
             }, 250)
           ) // Will log the window dimensions at most every 250ms

   - title: memoize (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const memoize = fn => {
             const cache = new Map()
             const cached = function(val) {
               return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val)
             }
             cached.cache = cache;
             return cached;
           }
           //```

           //Examples
           // See the `anagrams` snippet.
           const anagramsCached = memoize(anagrams)
           anagramsCached('javascript') // takes a long time
           anagramsCached('javascript') // returns virtually instantly since it's now cached
           console.log(anagramsCached.cache) // The cached anagrams map

   - title: Sleep (await) (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))
           //```

           //Examples
           async function sleepyWork() {
             console.log("I'm going to sleep for 1 second.")
             await sleep(1000)
             console.log('I woke up after 1 second.')
           }

   - title: throttle (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const throttle = (fn, wait) => {
             let inThrottle, lastFn, lastTime;
             return function() {
               const context = this,
                 args = arguments;
               if (!inThrottle) {
                 fn.apply(context, args)
                 lastTime = Date.now()
                 inThrottle = true;
               } else {
                 clearTimeout(lastFn)
                 lastFn = setTimeout(function() {
                   if (Date.now() - lastTime >= wait) {
                     fn.apply(context, args)
                     lastTime = Date.now()
                   }
                 }, Math.max(wait - (Date.now() - lastTime), 0))
               }
             }
           }
           //```

           //Examples
           window.addEventListener(
             'resize',
             throttle(function(evt) {
               console.log(window.innerWidth)
               console.log(window.innerHeight)
             }, 250)
           ) // Will log the window dimensions at most every 250ms

   - title: degreesToRads (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const degreesToRads = deg => (deg * Math.PI) / 180.0;
           //```

           //Examples
           degreesToRads(90.0) // ~1.5708

   - title: isEven (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isEven = num => num % 2 === 0;
           //``` js snip

           //Examples
           isEven(3) // false

   - title: round (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const round = (n, decimals = 0) => Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`)
           //```

           //Examples
           round(1.005, 2) // 1.01

   - title: deepClone (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const deepClone = obj => {
             let clone = Object.assign({}, obj)
             Object.keys(clone).forEach(
               key => (clone[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key])
             )
             return Array.isArray(obj) ? (clone.length = obj.length) && Array.from(clone) : clone;
           }
           //```

           //Examples
           const a = { foo: 'bar', obj: { a: 1, b: 2 } }
           const b = deepClone(a) // a !== b, a.obj !== b.obj

   - title: defaults (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const defaults = (obj, ...defs) => Object.assign({}, obj, ...defs.reverse(), obj)
           //```

           //Examples
           defaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }) // { a: 1, b: 2 }

   - title: get (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const get = (from, ...selectors) =>
             [...selectors].map(s =>
               s
                 .replace(/\[([^\[\]]*)\]/g, '.$1.')
                 .split('.')
                 .filter(t => t !== '')
                 .reduce((prev, cur) => prev && prev[cur], from)
             )
           //```

           //Examples
           const obj = { selector: { to: { val: 'val to select' } }, target: [1, 2, { a: 'test' }] }
           get(obj, 'selector.to.val', 'target[0]', 'target[2].a') // ['val to select', 1, 'test']

   - title: omit (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const omit = (obj, arr) =>
             Object.keys(obj)
               .filter(k => !arr.includes(k))
               .reduce((acc, key) => ((acc[key] = obj[key]), acc), {})
           //```

           //Examples
           omit({ a: 1, b: '2', c: 3 }, ['b']) // { 'a': 1, 'c': 3 }

   - title: omitBy (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const omitBy = (obj, fn) =>
             Object.keys(obj)
               .filter(k => !fn(obj[k], k))
               .reduce((acc, key) => ((acc[key] = obj[key]), acc), {})
           //```

           //Examples
           omitBy({ a: 1, b: '2', c: 3 }, x => typeof x === 'number') // { b: '2' }

   - title: orderBy OBJ (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const orderBy = (arr, props, orders) =>
             [...arr].sort((a, b) =>
               props.reduce((acc, prop, i) => {
                 if (acc === 0) {
                   const [p1, p2] = orders && orders[i] === 'desc' ? [b[prop], a[prop]] : [a[prop], b[prop]];
                   acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;
                 }
                 return acc;
               }, 0)
             )
           //```

           //Examples
           const users = [{ name: 'fred', age: 48 }, { name: 'barney', age: 36 }, { name: 'fred', age: 40 }];
           orderBy(users, ['name', 'age'], ['asc', 'desc']) // [{name: 'barney', age: 36}, {name: 'fred', age: 48}, {name: 'fred', age: 40}]
           orderBy(users, ['name', 'age']) // [{name: 'barney', age: 36}, {name: 'fred', age: 40}, {name: 'fred', age: 48}]

   - title: renameKeys OBJ (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const renameKeys = (keysMap, obj) =>
             Object.keys(obj).reduce(
               (acc, key) => ({
                 ...acc,
                 ...{ [keysMap[key] || key]: obj[key] }
               }),
               {}
             )
           //```

           //Examples
           const obj = { name: 'Bobo', job: 'Front-End Master', shoeSize: 100 }
           renameKeys({ name: 'firstName', job: 'passion' }, obj) // { firstName: 'Bobo', passion: 'Front-End Master', shoeSize: 100 }

   - title: capitalize String (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const capitalize = ([first, ...rest], lowerRest = false) =>
             first.toUpperCase() + (lowerRest ? rest.join('').toLowerCase() : rest.join(''))
           //```

           //Examples
           capitalize('fooBar') // 'FooBar'
           capitalize('fooBar', true) // 'Foobar'

   - title: escapeHTML String (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const escapeHTML = str =>
             .replace(
               /[&<>'"]/g,
               tag =>
                 ({
                   '&': '&amp;',
                   '<': '&lt;',
                   '>': '&gt;',
                   "'": '&#39;',
                   '"': '&quot;'
                 }[tag] || tag)
             )
           //```

           //Examples
           escapeHTML('<a href="#">Me & you</a>') // '&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;'

   - title: truncateString String (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const truncateString = (str, num) =>
             .length > num ? .slice(0, num > 3 ? num - 3 : num) + '...' : str;
           //```

           //Examples
           truncateString('boomerang', 7) // 'boom...'

   - title: is (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const is = (type, val) => ![, null].includes(val) && val.constructor === type;
           //```

           //Examples
           is(Array, [1]) // true
           is(ArrayBuffer, new ArrayBuffer()) // true
           is(Map, new Map()) // true
           is(RegExp, /./g) // true
           is(Set, new Set()) // true
           is(WeakMap, new WeakMap()) // true
           is(WeakSet, new WeakSet()) // true
           is(String, '') // true
           is(String, new String('')) // true
           is(Number, 1) // true
           is(Number, new Number(1)) // true
           is(Boolean, true) // true
           is(Boolean, new Boolean(true)) // true

   - title: isFunction (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isFunction = val => typeof val === 'function';
           //```

           //Examples
           isFunction('x') // false
           isFunction(x => x) // true

   - title: isNumber (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isNumber = val => typeof val === 'number';
           //```

           //Examples
           isNumber('1') // false
           isNumber(1) // true

   - title: isObject (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isObject = obj => obj === Object(obj)
           //```

           //Examples
           isObject([1, 2, 3, 4]) // true
           isObject([]) // true
           isObject(['Hello!']) // true
           isObject({ a: 1 }) // true
           isObject({}) // true
           isObject(true) // false

   - title: isValidJSON (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           const isValidJSON = str => {
             try {
               JSON.parse(str)
               return true;
             } catch (e) {
               return false;
             }
           }

   - title: getURLParameters (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const getURLParameters = url =>
             (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce(
               (a, v) => ((a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1)), a),
               {}
             )
           //```

           //Examples
           getURLParameters('http://url.com/page?name=Adam&surname=Smith') // {name: 'Adam', surname: 'Smith'}
           getURLParameters('google.com') // {}

   - title: isBrowser (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const isBrowser = () => ![typeof window, typeof document].includes('undefined')
           //```

           //Examples
           isBrowser() // true (browser)
           isBrowser() // false (Node)

   - title: mostPerformant (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const mostPerformant = (fns, iterations = 10000) => {
             const times = fns.map(fn => {
               const before = performance.now()
               for (let i = 0; i < iterations; i++) fn()
               return performance.now() - before;
             })
             return times.indexOf(Math.min(...times))
           }
           //```

           //Examples
           mostPerformant([
             () => {
               // Loops through the entire array before returning `false`
               [1, 2, 3, 4, 5, 6, 7, 8, 9, '10'].every(el => typeof el === 'number')
             },
             () => {
               // Only needs to reach index `1` before returning false
               [1, '2', 3, 4, 5, 6, 7, 8, 9, 10].every(el => typeof el === 'number')
             }
           ]) // 1

   - title: timeTaken (performance) (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const timeTaken = callback => {
             console.time('timeTaken')
             const r = callback()
             console.timeEnd('timeTaken')
             return r;
           }
           //```

           //Examples
           timeTaken(() => Math.pow(2, 10)) // 1024, (logged): timeTaken: 0.02099609375ms

   - title: toCurrency (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const toCurrency = (n, curr, LanguageFormat = undefined) =>
             Intl.NumberFormat(LanguageFormat, { style: 'currency', currency: curr }).format(n)
           //```

           //Examples
           toCurrency(123456.789, 'EUR') // €123,456.79  | currency: Euro | currencyLangFormat: Local
           toCurrency(123456.789, 'USD', 'en-us') // $123,456.79  | currency: US Dollar | currencyLangFormat: English (United States)
           toCurrency(123456.789, 'USD', 'fa') // ۱۲۳٬۴۵۶٫۷۹ ؜$ | currency: US Dollar | currencyLangFormat: Farsi
           toCurrency(322342436423.2435, 'JPY') // ¥322,342,436,423 | currency: Japanese Yen | currencyLangFormat: Local
           toCurrency(322342436423.2435, 'JPY', 'fi') // 322 342 436 423 ¥ | currency: Japanese Yen | currencyLangFormat: Finnish

   - title: toDecimalMark (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const toDecimalMark = num => num.toLocaleString('en-US')
           //```

           //Examples
           toDecimalMark(12305030388.9087) // "12,305,030,388.909"

   - title: validateNumber (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const validateNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;
           //```

           //Examples
           validateNumber('10') // true

   - title: orderBy (sortBy) (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const orderBy = (arr, props, orders) =>
             [...arr].sort((a, b) =>
               props.reduce((acc, prop, i) => {
                 if (acc === 0) {
                   const [p1, p2] = orders && orders[i] === 'desc' ? [b[prop], a[prop]] : [a[prop], b[prop]];
                   acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;
                 }
                 return acc;
               }, 0)
             )
           //```

           //Examples
           const users = [{ name: 'fred', age: 48 }, { name: 'barney', age: 36 }, { name: 'fred', age: 40 }];
           orderBy(users, ['name', 'age'], ['asc', 'desc']) // [{name: 'barney', age: 36}, {name: 'fred', age: 48}, {name: 'fred', age: 40}]
           orderBy(users, ['name', 'age']) // [{name: 'barney', age: 36}, {name: 'fred', age: 40}, {name: 'fred', age: 48}]

   - title: pick (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const pick = (obj, arr) =>
             arr.reduce((acc, curr) => (curr in obj && (acc[curr] = obj[curr]), acc), {})
           //```


           //Examples
           pick({ a: 1, b: '2', c: 3 }, ['a', 'c']) // { 'a': 1, 'c': 3 }

   - title: pickBy (30-seconds-of-code)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const pickBy = (obj, fn) =>
             Object.keys(obj)
               .filter(k => fn(obj[k], k))
               .reduce((acc, key) => ((acc[key] = obj[key]), acc), {})
           //```

           //Examples
           pickBy({ a: 1, b: '2', c: 3 }, x => typeof x === 'number') // { 'a': 1, 'c': 3 }

   - title: async (javascript.info)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           async function f() {
             return Promise.resolve(1)
           }

           f().then(alert) // 1

   - title: await (javascript.info)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           async function f() {

             let promise = new Promise((resolve, reject) => {
               setTimeout(() => resolve("done!"), 1000)
             })

             let result = await promise; // wait till the promise resolves (*)

             alert(result) // "done!"
           }

           f()

   - title: await/async Example
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           const doSomethingAsync = () => {
               return new Promise((resolve) => {
                   setTimeout(() => resolve('I did something'), 3000)
               })
           }

           const doSomething = async () => {
               console.log(await doSomethingAsync())
           }
           //```

           //https://flaviocopes.com/javascript-async-await/

   - title: clearTimeout
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let timerId = setTimeout(() => alert("never happens"), 1000)
           alert(timerId) // timer identifier

           clearTimeout(timerId)
           alert(timerId) // same identifier (doesn't become null after canceling)

   - title: clearInterval
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let timerId = setInterval(() =>
               alert('tick'),
             2000
           )

           clearInterval(timerId)

   - title: requestAnimationFrame
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           function repeatOften() {
             requestAnimationFrame(repeatOften)
           }

           requestAnimationFrame(repeatOften)
           //```

           //https://css-tricks.com/using-requestanimationframe/

   - title: objCopy / clone obj [No Deep]
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           objCopy = Object.assign({}, obj)

   - title: Module defaults
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function myFunction(options = {}) {
             let defaults = {
               color: 'red',
             }
             let actual = Object.assign({}, defaults, options)
             console.info(actual.color)
           }

           //ES6 destructuring function parameters
           function greet({ name = 'Rauno' } = {}) {
             console.log(`Hi ${name}!`)
           }

           greet() // Hi Rauno!
           greet({ name: 'Larry' }) // Hi Larry

   - title: ES6 Class
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           class Person {
               constructor(name, age, gender) {
                   this.name   = name;
                   this.age    = age;
                   this.gender = gender;
               }

               incrementAge() {
                 this.age += 1;
               }
           }

   - title: ES6 Class extends
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           class Personal extends Person {
               constructor(name, age, gender, occupation, hobby) {
                   super(name, age, gender)
                   this.occupation = occupation;
                   this.hobby = hobby;
               }

               incrementAge() {
                   super.incrementAge()
                   this.age += 20;
                   console.log(this.age)
               }
           }

   - title: Promise
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           new Promise((resolve, reject) => {
             if (ok) { resolve(result) }
             else { reject(error) }
           })

           promise
             .then((result) => {})
             .catch((error) => {})
             .finally(() => {})

   - title: Async Await
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           var request = require('request')

           function getJSON(url) {
             return new Promise(function(resolve, reject) {
               request(url, function(error, response, body) {
                 resolve(body)
               })
             })
           }

           async function main() {
             var data = await getJSON()
             console.log(data) // NOT undefined!
           }

           main()

   - title: ES6 Class with getter/setter
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           var person = {

             firstName: 'James',
             lastName: 'Bond',

             get fullName() {
                 console.log('Getting FullName')
                 return this.firstName + ' ' + this.lastName;
             },
             set fullName (name) {
                 console.log('Setting FullName')
                 var words = name.toString().split(' ')
                 this.firstName = words[0] || '';
                 this.lastName = words[1] || '';
             }
           }

           person.fullName; // James Bond
           person.fullName = 'Bond 007';
           person.fullName; // Bond 007

   - title: Getters and setters
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           const App = {
             get closed () {
               return this.status === 'closed'
             },
             set closed (value) {
               this.status = value ? 'closed' : 'open'
             }
           }

   - title: Get Property (Getter)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Object.defineProperty(config, 'isDev', {
               get: () => {
                   return config.get('dev')
               }
           })

   - title: reduce
     path: JSES6snip
     expand: .reduce
     params:
        codeclass: 'javascript'
        snippet: |-
           //``` js snip
           .reduce(
             function(acc, n) {
               return acc + n;
             },
             0 // firstVal
           )
           //```

           console.log(sum) // 21

           //Note : You will frequently encounter this method used in combination with arrow functions
           const sum = numbers.reduce((acc, n) => acc + n, 0)
           console.log(sum) // 21

   - title: map filter reduce
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           const students = [
             { name: "Nick", grade: 10 },
             { name: "John", grade: 15 },
             { name: "Julia", grade: 19 },
             { name: "Nathalie", grade: 9 },
           ];

           const aboveTenSum = students
             .map(student => student.grade) // we map the students array to an array of their grades
             .filter(grade => grade >= 10) // we filter the grades array to keep those 10 or above
             .reduce((prev, next) => prev + next, 0) // we sum all the grades 10 or above one by one

           console.log(aboveTenSum) // 44 -- 10 (Nick) + 15 (John) + 19 (Julia), Nathalie below 10 is ignored

   - title: ES6 Math.sign
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           Math.sign(-8)
           # - 1
           Math.sign(0)
           # 0
           Math.sign(3)
           # 1

   - title: ES6 Classes, Inheritance, Setters, Getters
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           class Rectangle extends Shape {
             constructor(id, x, y, w, h) {
               super(id, x, y)
               this.width = w
               this.height = h
             }
             // Getter and setter
             set width(w) {
               this._width = w
             }
             get width() {
               return this._width
             }
           }

           class Circle extends Shape {
             constructor(id, x, y, radius) {
               super(id, x, y)
               this.radius = radius
             }
             do_a(x) {
               let a = 12;
               super.do_a(x + a)
             }
             static do_b() { ...
             }
           }
           Circle.do_b()

   - title: Destructuring Arrays
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let [a, b, c, d] = [1, 2, 3, 4];
           console.log(a) //1

   - title: Async/Await ⚠ ES7
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           async function testFunc() {
             return new Promise((resolve, reject) => {
               const result = Math.random > 0.5
               setTimeout(() => {
                 return result ? resolve(‘alive’) :
                   reject(‘dead’)
               })
             })
           }

           /**/

           try {
             console.log(await testFunc())
             // -> ‘alive’
           } catch (err) {
             console.log(err)
             // -> ‘dead’
           }

   - title: ES6 Enhanced Object Properties
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let obj = {
               foo: "bar",
               [ "baz" + quux() ]: 42
           }

   - title: console.log map
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let c = console.log

   - title: ES6 find & findIndex
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           [ 1, 3, 4, 2 ].find(x => x > 3) // 4
           [ 1, 3, 4, 2 ].findIndex(x => x > 3) // 2

   - title: Update object
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           var state = {
               id: 1,
               points: 100,
               name: "Goran"
           }

           var newState = {
               ...state,
               points: 120
           }

           /*
             {
               id: 1,
               points: 120,
               name: "Goran"
             }
           */

   - title: Some
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           [2, 5, 8, 1, 4].some(x => x > 10)  // false
           [12, 5, 8, 1, 4].some(x => x > 10) // true

   - title: navigator.geolocation
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           if (navigator && navigator.geolocation) {
             navigator.geolocation.watchPosition(onSuccess, onError, {
               enableHighAccuracy: true,
               timeout: 1000 * 60
             })
             init = true;
           }

   - title: Css variables
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           let root = document.documentElement;
           root.style.setProperty('--main-bg-color', '#000')

   - title: replace zero width space (unicode 8203 & 160)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           .replace(/\u200B/g, '').replace(/\u00a0/g, " ")

   - title: replace all backslashes [\]
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           .replace(/\\/g, "/")

   - title: each key & value of object
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           for (let [key, value] of Object.entries(OBJ)) {
           }

   - title: Create url cache
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           '?c=' + String(Math.round(Math.random()*10000000))

   - title: e.preventDefault
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           if (e && e.preventDefault) e.preventDefault()

   - title: string startsWith;
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           .startsWith("")

   - title: Remove Accents (diacritics)
     path: JSES6snip
     params:
        codeclass: 'javascript'
        snippet: |-
           function RemoveAccents(strAccents) {
             var strAccents = strAccents.split('')
             var strAccentsOut = new Array()
             var strAccentsLen = strAccents.length;
             var accents = 'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž';
             var accentsOut = 'AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz';
             for (var y = 0; y < strAccentsLen; y++) {
               if (accents.indexOf(strAccents[y]) != -1) {
                 strAccentsOut[y] = accentsOut.substr(accents.indexOf(strAccents[y]), 1)
               } else strAccentsOut[y] = strAccents[y];
             }
             strAccentsOut = strAccentsOut.join('')
             return strAccentsOut;
           }
